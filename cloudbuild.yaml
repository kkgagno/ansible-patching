# cloudbuild.yaml

# In this directory, run the following command to build this builder.
# $ gcloud builds submit . --config=cloudbuild.yaml

# See docs at https://developer.hashicorp.com/packer/tutorials/docker-get-started/get-started-install-cli



steps:
  # Step 1: Install Terraform
  #- name: 'hashicorp/terraform:latest'
  # entrypoint: 'sh'
  #  args: ['-c', 'curl -Lo terraform.zip https://releases.hashicorp.com/terraform/$(curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r -M .current_version)/terraform_$(curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r -M .current_version)_linux_amd64.zip && unzip terraform.zip && chmod +x terraform && mv terraform /usr/local/bin']

  # Step 2: Authenticate with Google Cloud
  
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['components', 'install', 'kubectl']
    
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # gcloud auth activate-service-account --key-file=mofo-proj-23f380b7fd38.json
        apt-get update && apt-get install -y ansible
        gcloud source repos clone ansible --project=mofo-proj
        cd ansible
        ssh-keygen -t rsa -q -f oslogin -N ""
        cat oslogin
        # mkdir ~/.ssh
        # cp oslogin ~/.ssh/oslogin
        # cp oslogin.pub ~/.ssh/oslogin.pub
        chmod 600 oslogin
        # gcloud iam service-accounts keys upload oslogin.pub --iam-account 41394223354@cloudbuild.gserviceaccount.com
        # gcloud auth list
        # gcloud compute os-login ssh-keys add --key-file oslogin.pub --ttl=1y
        gcloud compute project-info add-metadata --metadata-from-file oslogin=oslogin.pub
        # gcloud config set auth/impersonate_service_account 41394223354@cloudbuild.gserviceaccount.com
        # gcloud auth application-default login --impersonate-service-account 41394223354@cloudbuild.gserviceaccount.com --quiet
        ansible-playbook main.yaml --private-key oslogin -i hosts
      # gcloud compute os-config os-policy-assignments create ubuntu-policy --location=us-east1-b --file=policies/ubuntu-policy.yaml --async
      # gcloud compute os-config os-policy-assignments create centos-policy --location=us-east1-b --file=policies/centos-policy.yaml --async
      # gcloud compute os-config os-policy-assignments create windows-policy --location=us-east1-b --file=policies/windows-policy.yaml --async
      # gcloud compute project-info describe --format "value(commonInstanceMetadata[items][ssh-keys])"
      # gcloud auth activate-service-account computeengine@mofo-proj.iam.gserviceaccount.com --key-file=mofo-proj-23f380b7fd38.json
        # issue is logged in as compute account unable to authenticate using key to ssh, login as myself and it works

  #- name: 'gcr.io/cloud-builders/gcloud'
  #  entrypoint: 'bash'
  #  args:
  #    - '-c'
  #    - |
  #      # Clone your Ansible playbook repository
  #      gcloud source repos clone ansible --project=mofo-proj

  #- name: 'gcr.io/cloud-builders/gcloud'
  #  entrypoint: 'bash'
  #  args:
  #    - '-c'
  #    - |
  #     # Change directory to your Ansible playbook directory
  #      cd ansible

  #- name: 'gcr.io/cloud-builders/ansible'
  #  entrypoint: 'bash'
  #  args:
  #    - '-c'
  #    - |
  #      # Run your Ansible playbook
  #        ansible-playbook ./main.yml D ./keith -i hosts

  #- name: 'ubuntu'
  #  entrypoint: 'bash'
  #  args:
  #    - '-c'
  #    - |
        # cd ansible  # Change to the directory containing your Ansible playbook
  #      apt-get update
  #      apt-get -y install ansible
  #      ansible-playbook main.yaml --private-key oslogin -i hosts

  #- name: 'gcr.io/$PROJECT_ID/ansible'
  #  entrypoint: '/usr/bin/ansible-playbook'
  #  args: ['main.yaml', '--private-key', 'oslogin', '-i', 'hosts']  # '--private-key', 'ansible',     , '-e', 'ansible_python_interpreter=python3', '-m', 'setup', '-a', 'filter=ansible_hostname']
  

    #images: 
    #- 'gcr.io/$PROJECT_ID/ansible'











  # Step 3: Run Terraform commands
  #- name: 'hashicorp/terraform:latest'
  #  entrypoint: 'sh'
  #  args: ['-c', 'terraform init && terraform plan']
    
  #- name: 'gcr.io/cloud-builders/wget'
  #  args: ["https://releases.hashicorp.com/packer/${_PACKER_VERSION}/packer_${_PACKER_VERSION}_linux_amd64.zip"]
  #- name: 'gcr.io/cloud-builders/docker'
  #  args: ['build', '-t', 'gcr.io/$PROJECT_ID/packer:${_PACKER_VERSION}',
  #         '-t', 'gcr.io/$PROJECT_ID/packer',
  #         '--build-arg', 'PACKER_VERSION=${_PACKER_VERSION}',
  #         '--build-arg', 'PACKER_VERSION_SHA256SUM=${_PACKER_VERSION_SHA256SUM}',
  #         '.']
#substitutions:
  #_PACKER_VERSION: 1.9.2
  #_PACKER_VERSION_SHA256SUM: 34fe48d0d5f99670af15d8a3b581db7ce9d08093ce37240d7c7b996de7947275

#images:
 # - 'gcr.io/$PROJECT_ID/packer:latest'
 # - 'gcr.io/$PROJECT_ID/packer:${_PACKER_VERSION}'
#tags: ['cloud-builders-community']

